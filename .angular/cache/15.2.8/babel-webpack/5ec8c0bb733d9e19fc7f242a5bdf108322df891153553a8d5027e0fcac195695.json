{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  register(id) {\n    this.modals.push({\n      id,\n      visible: false\n    });\n  }\n  isModalVisible(id) {\n    return Boolean(this.modals.find(modal => modal.id === id)?.visible);\n  }\n  toggleModal(id) {\n    const modal = this.modals.find(modal => modal.id === id);\n    currentModal.visible = !currentModal?.visible;\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,YAAY;EAGvBC;IAFQ,WAAM,GAAa,EAAE;EAEb;EAEhBC,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfF,EAAE;MACFG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAC,cAAc,CAACJ,EAAU;IACvB,OAAOK,OAAO,CAAC,IAAI,CAACJ,MAAM,CAACK,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACP,EAAE,KAAKA,EAAE,CAAC,EAAEG,OAAO,CAAC;EACrE;EAEAK,WAAW,CAACR,EAAU;IACpB,MAAMO,KAAK,GAAG,IAAI,CAACN,MAAM,CAACK,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACP,EAAE,KAAKA,EAAE,CAAC;IACxDS,YAAY,CAACN,OAAO,GAAG,CAACM,YAAY,EAAEN,OAAO;EAC/C;;AAnBWN,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAa,SAAZb,YAAY;EAAAc,YAFX;AAAM","names":["ModalService","constructor","register","id","modals","push","visible","isModalVisible","Boolean","find","modal","toggleModal","currentModal","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dmarc\\Documents\\Programming\\moss-clips\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ninterface IModal {\n  id: string;\n  visible: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  private modals: IModal[] = []\n  \n  constructor() { }\n\n  register(id: string){\n    this.modals.push({\n      id,\n      visible: false\n    })\n  }\n\n  isModalVisible(id: string) {\n    return Boolean(this.modals.find(modal => modal.id === id)?.visible)\n  }\n\n  toggleModal(id: string) {\n    const modal = this.modals.find(modal => modal.id === id)\n    currentModal.visible = !currentModal?.visible \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}