{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modals = [];\n  }\n  register(id) {\n    this.modals.push({\n      id,\n      visible: false\n    });\n  }\n  unregister(id) {\n    this.modals = this.modals.filter(modal => modal.id !== id);\n  }\n  isModalVisible(id) {\n    return Boolean(this.modals.find(modal => modal.id === id)?.visible);\n  }\n  toggleModal(id) {\n    const modal = this.modals.find(modal => modal.id === id);\n    if (modal) modal.visible = !modal.visible;\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,YAAY;EAGvBC;IAFO,WAAM,GAAa,EAAE;EAEZ;EAEhBC,QAAQ,CAACC,EAAU;IACjB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfF,EAAE;MACFG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAC,UAAU,CAACJ,EAAU;IACnB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACI,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;EAC5D;EAEAO,cAAc,CAACP,EAAU;IACvB,OAAOQ,OAAO,CAAC,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACH,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC,EAAEG,OAAO,CAAC;EACrE;EAEAO,WAAW,CAACV,EAAU;IACpB,MAAMM,KAAK,GAAG,IAAI,CAACL,MAAM,CAACQ,IAAI,CAACH,KAAK,IAAIA,KAAK,CAACN,EAAE,KAAKA,EAAE,CAAC;IACxD,IAAGM,KAAK,EAAEA,KAAK,CAACH,OAAO,GAAG,CAACG,KAAK,CAACH,OAAO;EAC1C;;AAvBWN,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAc,SAAZd,YAAY;EAAAe,YAFX;AAAM","names":["ModalService","constructor","register","id","modals","push","visible","unregister","filter","modal","isModalVisible","Boolean","find","toggleModal","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\dmarc\\Documents\\Programming\\moss-clips\\src\\app\\services\\modal.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ninterface IModal {\n  id: string;\n  visible: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  public modals: IModal[] = []\n  \n  constructor() { }\n\n  register(id: string){\n    this.modals.push({\n      id,\n      visible: false\n    })\n  }\n\n  unregister(id: string){\n    this.modals = this.modals.filter(modal => modal.id !== id)\n  }\n\n  isModalVisible(id: string) {\n    return Boolean(this.modals.find(modal => modal.id === id)?.visible)\n  }\n\n  toggleModal(id: string) {\n    const modal = this.modals.find(modal => modal.id === id)\n    if(modal) modal.visible = !modal.visible \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}